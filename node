{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ad194e62",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\82109\\AppData\\Local\\Temp\\ipykernel_12316\\997792627.py:89: DeprecationWarning: write_transaction has been renamed to execute_write\n",
      "  session.write_transaction(create_neo4j_node, *converted_row)\n"
     ]
    }
   ],
   "source": [
    "import psycopg2\n",
    "from neo4j import GraphDatabase\n",
    "import decimal  # neo4j에서 값은 float형으로 받아야함\n",
    "\n",
    "# RDBMS (PostgreSQL) 연결 설정\n",
    "pg_conn = psycopg2.connect(\n",
    "    host=\"114.200.199.53\",\n",
    "    database=\"postgres\",\n",
    "    user=\"postgres\",\n",
    "    password=\"goodtime**95\"\n",
    ")\n",
    "pg_conn.autocommit = False  # 자동 커밋 비활성화. 명시적인 트랜잭션 관리를 위함\n",
    "\n",
    "# Neo4j 연결 설정\n",
    "neo4j_uri = \"bolt://localhost:7687\"\n",
    "neo4j_user = \"neo4j\"\n",
    "neo4j_password = \"goodtime**95\"\n",
    "neo4j_driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_user, neo4j_password))\n",
    "\n",
    "# Neo4j에 노드를 생성하는 함수\n",
    "# 각 매개변수는 Neo4j 노드의 속성에 해당함\n",
    "def create_neo4j_node(tx, node_id, node_name, 대분류, 중분류, 소분류, 경도, 위도, 주소, 광역시, 시구군, 동,\n",
    "                      관광유형, layer, 상권명, 관광지_상권, 이동인구수_합계,\n",
    "                      일월_이동인구수, 이월_이동인구수, 삼월_이동인구수, 사월_이동인구수, 오월_이동인구수, 육월_이동인구수,\n",
    "                      칠월_이동인구수, 팔월_이동인구수, 구월_이동인구수, 십월_이동인구수, 십일월_이동인구수, 십이월_이동인구수,\n",
    "                      여성, 남성, 이십대, 삼십대, 사십대, 오십대, 육십대, 칠십대,\n",
    "                      서울, 인천, 대전, 광주, 대구, 부산, 울산, 경기, 충남, 충북, 전남, 전북, 경남, 경북, 강원, 세종, 제주, 전국, 부산제외,\n",
    "                      시_0_2, 시_3_5, 시_6_8, 시_9_11, 시_12_14, 시_15_17, 시_18_20, 시_21_23):\n",
    "    # CREATE 쿼리를 정의하여 Neo4j에 데이터를 삽입\n",
    "    # `$` 표시는 매개변수를 나타냄. `백틱`은 속성 이름에 특수 문자가 포함된 경우 사용\n",
    "    # Cypher 쿼리에서 숫자로 시작하는 속성 이름들은 백틱(```)으로 감싸줘야함\n",
    "    query = (\n",
    "        \"CREATE (n:TMAP_Destination { id: $id, dest_name: $dest_name, 대분류: $대분류, 중분류: $중분류, 소분류: $소분류, 경도: $경도, 위도: $위도, \"\n",
    "        \"주소: $주소, 광역시: $광역시, 시구군: $시구군, 동: $동, 관광유형: $관광유형, layer: $layer, 상권명: $상권명, 관광지_상권: $관광지_상권, \"\n",
    "        \"이동인구수_합계: $이동인구수_합계, `1월_이동인구수`: $이월_이동인구수, `2월_이동인구수`: $이월_이동인구수, `3월_이동인구수`: $삼월_이동인구수, `4월_이동인구수`: $사월_이동인구수, \"\n",
    "        \"`5월_이동인구수`: $오월_이동인구수, `6월_이동인구수`: $육월_이동인구수, `7월_이동인구수`: $칠월_이동인구수, `8월_이동인구수`: $팔월_이동인구수, \"\n",
    "        \"`9월_이동인구수`: $구월_이동인구수, `10월_이동인구수`: $십월_이동인구수, `11월_이동인구수`: $십일월_이동인구수, `12월_이동인구수`: $십이월_이동인구수, \"\n",
    "        \"여성: $여성, 남성: $남성, `20대`: $이십대, `30대`: $삼십대, `40대`: $사십대, `50대`: $오십대, `60대`: $육십대, `70대`: $칠십대, \"\n",
    "        \"서울: $서울, 인천: $인천, 대전: $대전, 광주: $광주, 대구: $대구, 부산: $부산, 울산: $울산, 경기: $경기, 충남: $충남, 충북: $충북, \"\n",
    "        \"전남: $전남, 전북: $전북, 경남: $경남, 경북: $경북, 강원: $강원, 세종: $세종, 제주: $제주, 전국: $전국, 부산제외: $부산제외, \"\n",
    "        \"`0시_2시`: $시_0_2, `3시_5시`: $시_3_5, `6시_8시`: $시_6_8, `9시_11시`: $시_9_11, \"\n",
    "        \"`12시_14시`: $시_12_14, `15시_17시`: $시_15_17, `18시_20시`: $시_18_20, `21시_23시`: $시_21_23}) \"\n",
    "        \"RETURN n\"\n",
    "    )    \n",
    "    # 쿼리 실행\n",
    "    result = tx.run(query, id=node_id, dest_name=node_name, 대분류=대분류, 중분류=중분류, 소분류=소분류, 경도=경도, 위도=위도, \n",
    "                주소=주소, 광역시=광역시, 시구군=시구군, 동=동, 관광유형=관광유형, layer=layer, 상권명=상권명, 관광지_상권=관광지_상권,\n",
    "                이동인구수_합계=이동인구수_합계, 일월_이동인구수=일월_이동인구수, 이월_이동인구수=이월_이동인구수, 삼월_이동인구수=삼월_이동인구수, 사월_이동인구수=사월_이동인구수, \n",
    "                오월_이동인구수=오월_이동인구수, 육월_이동인구수=육월_이동인구수, 칠월_이동인구수=칠월_이동인구수, 팔월_이동인구수=팔월_이동인구수, \n",
    "                구월_이동인구수=구월_이동인구수, 십월_이동인구수=십월_이동인구수, 십일월_이동인구수=십일월_이동인구수, 십이월_이동인구수=십이월_이동인구수,\n",
    "                여성=여성, 남성=남성, 이십대=이십대, 삼십대=삼십대, 사십대=사십대, 오십대=오십대, 육십대=육십대, 칠십대=칠십대,\n",
    "                서울=서울, 인천=인천, 대전=대전, 광주=광주, 대구=대구, 부산=부산, 울산=울산, 경기=경기, 충남=충남, 충북=충북, \n",
    "                전남=전남, 전북=전북, 경남=경남, 경북=경북, 강원=강원, 세종=세종, 제주=제주, 전국=전국, 부산제외=부산제외,\n",
    "                시_0_2=시_0_2, 시_3_5=시_3_5, 시_6_8=시_6_8, 시_9_11=시_9_11, 시_12_14=시_12_14, 시_15_17=시_15_17, 시_18_20=시_18_20, 시_21_23=시_21_23)\n",
    "\n",
    "    return result.single()[0] # 생성된 노드 반환\n",
    "\n",
    "def main():\n",
    "    with pg_conn.cursor(name='fetch_large_data') as cur:\n",
    "        cur.itersize = 5000  # 한 번에 fetch할 row의 수\n",
    "        # 데이터베이스에서 데이터 선택 쿼리 실행\n",
    "        cur.execute(\"\"\"\n",
    "            SELECT id, dest_name, 대분류, 중분류, 소분류, 경도, 위도, 주소, 광역시, 시구군, 동, 관광유형, layer, 상권명, 관광지_상권, 이동인구수_합계,\n",
    "            '1월_이동인구수', '2월_이동인구수', '3월_이동인구수', '4월_이동인구수', '5월_이동인구수', '6월_이동인구수', \n",
    "            '7월_이동인구수', '8월_이동인구수', '9월_이동인구수', '10월_이동인구수', '11월_이동인구수', '12월_이동인구수', \n",
    "            여성, 남성, '20대', '30대', '40대', '50대', '60대', '70대', \n",
    "            서울, 인천, 대전, 광주, 대구, 부산, 울산, 경기, 충남, 충북, 전남, 전북, 경남, 경북, 강원, 세종, 제주, 전국, 부산제외,\n",
    "            '0시_2시', '3시_5시', '6시_8시', '9시_11시', '12시_14시', '15시_17시', '18시_20시', '21시_23시'\n",
    "            FROM preprocessing.티맵_이동인구수_데이터_월별_분류추가\n",
    "            \"\"\")\n",
    "\n",
    "        # Neo4j에 노드 생성\n",
    "        with neo4j_driver.session() as session:\n",
    "            while True:\n",
    "                rows = cur.fetchmany(cur.itersize)\n",
    "                if not rows:\n",
    "                    break  # 모든 데이터를 처리했으면 종료\n",
    "                \n",
    "                for row in rows:\n",
    "                    # row의 모든 값을 create_neo4j_node 함수에 전달\n",
    "                    #session.write_transaction(create_neo4j_node, *row)\n",
    "                    # row의 각 숫자형 값을 float으로 변환\n",
    "                    #converted_row = tuple(float(item) if isinstance(item, decimal.Decimal) else item for item in row)\n",
    "                    converted_row = [float(value) if isinstance(value, decimal.Decimal) else value for value in row]\n",
    "                    # 변환된 값들로 create_neo4j_node 함수를 호출\n",
    "                    session.write_transaction(create_neo4j_node, *converted_row)\n",
    "                \n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73efd122",
   "metadata": {},
   "source": [
    "시간대별 인구 이동 수치도 Neo4j 노드의 속성으로 추가하기 위해서는 create_neo4j_node 함수의 매개변수를 확장하고, PostgreSQL 쿼리에서 이 데이터를 선택한 후, 이를 Neo4j 쿼리에 전달해야 합니다. 또한, Cypher 쿼리에서 숫자로 시작하는 속성 이름들은 백틱(```)으로 감싸줘야 하는 것을 기억하세요."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6dfd834",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
